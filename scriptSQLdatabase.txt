-- Creación de la tabla usuario
CREATE TABLE IF NOT EXISTS public.usuario
(
    idUsuario serial NOT NULL,
    dni integer NOT NULL,
    nombres character varying(50) NOT NULL,
    apellidos character varying NOT NULL,
    genero character varying(100) NOT NULL,
    direccion character varying(100) NOT NULL,
    dependencia character varying(100) NOT NULL,
    fechaNacimiento date NOT NULL,
    talla numeric NOT NULL,
    rh character varying NOT NULL,
    nombreEmergencia character varying NOT NULL,
    parentesco character varying NOT NULL,
    telefonoEmergencia character varying  NOT NULL,
    eps character varying  NOT NULL,
    alergias character varying  NOT NULL DEFAULT 'Ninguno'::character varying,
    contrasena character varying  NOT NULL,
    actividadSemana integer NOT NULL,
    nivelSemana character varying ,
    imgPerfil character varying ,
    rol integer NOT NULL DEFAULT 0,
    grupo character varying(100) ,
    PRIMARY KEY (idUsuario)
);

-- Creación de la tabla tests
CREATE TABLE IF NOT EXISTS public.tests
(
    idTest serial NOT NULL,
    fecha date NOT NULL DEFAULT now(),
    fkBruce integer,
    fkCaminata integer,
    idUsuario integer,
    PRIMARY KEY (idTest),
    CONSTRAINT fkTestUsuario FOREIGN KEY (idUsuario)
    REFERENCES public.usuario (idUsuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID
);

-- Creación de la tabla etapas
CREATE TABLE IF NOT EXISTS public.etapas
(
    idEtapa serial NOT NULL,
    eleFinal numeric NOT NULL,
    velocidadFinal numeric NOT NULL,
    numeroEtapa integer NOT NULL,
    fcr numeric NOT NULL,
    fcm numeric NOT NULL,
    vodos integer NOT NULL,
    idTestBruce integer,
    saturacionVodos numeric,
    PRIMARY KEY (idEtapa),
    CONSTRAINT fkTestEtapas FOREIGN KEY (idTestBruce)
    REFERENCES public.tests (idTest) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID
);

-- Creación de la tabla caminata
CREATE TABLE IF NOT EXISTS public.caminata
(
    idCaminata serial NOT NULL,
    fcr numeric NOT NULL,
    tiempo numeric NOT NULL,
    distancia numeric NOT NULL,
    consumoVo2 numeric,
    bareVodos integer NOT NULL,
    fcm numeric,
    PRIMARY KEY (idCaminata)
);

-- Creación de la tabla historial
CREATE TABLE IF NOT EXISTS public.historial
(
    idHistorial serial NOT NULL,
    fecha date NOT NULL DEFAULT now(),
    peso numeric NOT NULL,
    bareImc integer NOT NULL,
    saturacionVodos numeric,
    idUsuario integer NOT NULL,
    PRIMARY KEY (idHistorial),
    CONSTRAINT fkUsuarioHistorial FOREIGN KEY (idUsuario)
    REFERENCES public.usuario (idUsuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID
);

-- Creación de la tabla recomendaciones
CREATE TABLE IF NOT EXISTS public.recomendaciones
(
    idRecomendacion serial NOT NULL,
    descripcion character varying NOT NULL,
    idHistorial integer NOT NULL,
    idTests integer NOT NULL,
    PRIMARY KEY (idRecomendacion),
    CONSTRAINT fkHistorialRecomendaciones FOREIGN KEY (idHistorial)
    REFERENCES public.historial (idHistorial) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID,
    CONSTRAINT fkTetsRecomendaciones FOREIGN KEY (idTests)
    REFERENCES public.tests (idTest) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID
);

-- Inserción de datos en la tabla usuario
INSERT INTO public.usuario (dni, nombres, apellidos, genero, direccion, dependencia, fechaNacimiento, talla, rh, nombreEmergencia, parentesco, telefonoEmergencia, eps, contrasena, actividadSemana, rol)
VALUES (123456789, 'Juan', 'Pérez', 'Masculino', 'Calle Principal 123', 'Departamento de Informática', '1990-05-20', 1.75, 'A+', 'María Pérez', 'Hermano', '987654321', 'EPS Segura', 'contraseña123', 5, 1);

-- Inserción de datos en la tabla caminata
INSERT INTO public.caminata (fcr, tiempo, distancia, bareVodos, fcm)
VALUES (150, 30, 5, 3, 160);

-- Inserción de datos en la tabla historial
INSERT INTO public.historial (fecha, peso, bareImc, idUsuario)
VALUES ('2024-02-25', 70.5, 25, 1);

-- Inserción de datos en la tabla recomendaciones
INSERT INTO public.recomendaciones (descripcion, idHistorial, idTests)
VALUES ('Hacer ejercicio regularmente.', 1, 1);

-- Alteración de la tabla etapas para agregar la columna saturacionVodos
ALTER TABLE public.etapas
ADD COLUMN saturacionVodos numeric;

-- Inserción de datos en la columna saturacionVodos de la tabla etapas
UPDATE public.etapas
SET saturacionVodos = 90.5
WHERE idEtapa = 1; -- Ajusta esta condición según tus necesidades
